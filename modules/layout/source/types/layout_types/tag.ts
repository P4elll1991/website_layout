import IStyle from './styles/IStyle'
import { Selector } from './selector'
import { Func } from './func'
import { ParamType } from './func'

// Событие блока
export class EventTag {
    id: string
    type: EventTagkType // тип события
    params: any[] // параметры передаваемые функции
    function: Func // Функция которая выполняется при этом событии
}

export class Param {
    id: string
    type: ParamType
    value: string
}

export class Attr {
    id: string
    name: string // имя аттрибута
    value: string // значение
    is_required: boolean // обязательный
}

// Описание элемента DOM
export class Tag {
    id: string // ай-ди элемента
    order: number // Порядок контейнера в родительском контейнере
    name: TagType // Название элемента
    description: string // Описание элемента (данного)
    description_type: string // Описание типа элемента
    attr: Attr[] //  аттрибуты
    styles: IStyle[] // Стили элемента
    classes: Selector[] // Классы елемента
    events: EventTag[] // События элемента
    data: Tag[] // подэлементы
}

// Тип элемента DOM
export enum TagType {
    CONTENT = 'content', // не контейнер - только для текстового содержания
    DIV = 'div', // Тег-контейнер для разделов HTML-документа. Используется для группировки блочных элементов с целью форматирования стилями.
    SPAN = 'span', // Контейнер для строчных элементов. Можно использовать для форматирования отрывков текста, например, выделения цветом отдельных слов.
    INPUT = 'input', // Создает многофункциональные поля формы, в которые пользователь может вводить данные.
    CANVAS = 'canvas', // Холст-контейнер для динамического отображения изображений, таких как простые изображения, диаграммы, графики и т.п. Для рисования используется скриптовый язык JavaScript.
    FOOTER = 'footer', // Определяет завершающую область (нижний колонтитул) документа или раздела
    FORM = 'form', // Форма для сбора и отправки на сервер информации от пользователей
    BODY = 'body', // Тело документа
    H1 = 'h1', // заголовки
    H2 = 'h2', //
    H3 = 'h3', //
    H4 = 'h4', //
    H5 = 'h5', //
    H6 = 'h6', //
    EMBED = 'embed', // Тег-контейнер для встраивания внешнего интерактивного контента или плагина.
    HEAD = 'head', // Элемент-контейнер для метаданных HTML-документа, таких как
    A = 'a', // Создаёт гипертекстовые ссылки.
    IFRAME = 'iframe', // Создает встроенный фрейм, загружая в текущий HTML-документ другой документ.
    IMG = 'img', // Встраивает изображения в HTML-документ с помощью атрибута src, значением которого является адрес встраиваемого изображения.
    LABEL = 'label', // Добавляет текстовую метку для элемента <input>
    LI = 'li', // Элемент маркированного или нумерованного списка.
    LINK = 'link', // Определяет отношения между документом и внешним ресурсом. Также используется для подключения внешних таблиц стилей.
    OL = 'ol', // Упорядоченный нумерованный список. Нумерация может быть числовая или алфавитная.
    OPTGROUP = 'optgroup', // Контейнер с заголовком для группы элементов <option>
    OPTION = 'option', // Определяет вариант/опцию для выбора в раскрывающемся списке <select>, <optgroup> или <datalist>
    OUTPUT = 'output', // Поле для вывода результата вычисления, рассчитанного с помощью скрипта.
    P = 'p', // Параграфы в тексте.
    SCRIPT = 'script', // Используется для определения сценария на стороне клиента (обычно JavaScript). Содержит либо текст скрипта, либо указывает на внешний файл сценария с помощью атрибута src.
    SELECT = 'select', // Элемент управления, позволяющий выбирать значения из предложенного множества. Варианты значений помещаются в <option>.
    STYLE = 'style', // Подключает встраиваемые таблицы стилей
    TABLE = 'table', // Тег для создания таблицы.
    TBODY = 'tbody', // Определяет тело таблицы.
    TD = 'td', // Создает ячейку таблицы.
    TH = 'th', // Создает заголовок ячейки таблицы.
    THEAD = 'thead', // Определяет заголовок таблицы.
    TR = 'tr', // Создает строку таблицы.
    TITLE = 'title', // Заголовок HTML-документа, отображаемый в верхней части строки заголовка браузера. Также может отображаться в результатах поиска, поэтому это следует принимать во внимание предоставление названия.
    UL = 'ul', // Создает маркированный список.
}

// Тип события элемента DOM
export enum EventTagkType {
    ON_BLUR = 'onblur', //Потеря фокуса
    ON_CHANGE = 'onchange', //Изменение значения элемента формы.
    ON_CLICK = 'onclick', //Щелчок левой кнопкой мыши на элементе.
    ON_DBL_CLICK = 'ondblclick', //Двойной щелчок левой кнопкой мыши на элементе.
    ON_FOCUS = 'onfocus', //Получение фокуса
    ON_KEY_DOWN = 'onkeydown', //Клавиша нажата, но не отпущена.
    ON_KEY_PRESS = 'onkeypress', //Клавиша нажата и отпущена.
    ON_KEY_UP = 'onkeyup', //Клавиша отпущена.
    ON_LOAD = 'onload', // Документ загружен.
    ON_MOUSE_DOWN = 'onmousedown', // Нажата левая кнопка мыши.
    ON_MOUSE_MOVE = 'onmousemove', // Перемещение курсора мыши.
    ON_MOUSE_OUT = 'onmouseout', // Курсор покидает элемент.
    ON_MOUSE_OVER = 'onmouseover', // Курсор наводится на элемент.
    ON_MOUSE_UP = 'onmouseup', // Левая кнопка мыши отпущена.
    ON_RESET = 'onreset', // Форма очищена.
    ON_SELECT = 'onselect', // Выделен текст в поле формы.
    ON_SUBMIT = 'onsubmit', // Форма отправлена.
    ON_UNLOAD = 'onunload', // Закрытие окна.
}
